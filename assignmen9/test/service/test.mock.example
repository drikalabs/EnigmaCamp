import createDBConnection from '../../src/database/connection';
import {LocationService} from '../../src/service';
import {fail,deepEqual,equal} from 'assert';
import configure from '../../src/config';

let connection;
let service;
describe('Location Service', () => {
    // beforeAll(async ()=>{
    //     configure();
    //     connection = await createDBConnection();
    //     if(! connection.isConnected)fail('unable to create database Connection');
    //     service = new LocationService();
    //     await service.locationRepository().clear();
    // });
    
    // beforeEach(async ()=>{
    //     await service.locationRepository().clear();
    // })
    const mockRepo = jest.fn(()=>({
        save:jest.fn().mockImplementation((location) =>location),
        findOne :jest.fn().mockImplementation((idLocation) => ({idLocation:idLocation,locationName:""})),
        findAll :jest.fn().mockImplementation(()=>{[{idLocation:idLocation,locationName:""},
        {idLocation:idLocation,locationName:""},
        {idLocation:idLocation,locationName:""}]})
    }));

    it('saveLocation should call repo once', async () => {
        const expected ={
            locationName:'SURABAYA'
        }
        let service = new LocationService();
        const SPY = jest.fn(()=>expected);
        
        jest.spyOn(service,'saveLocation').mockImplementation(()=> SPY(expected))
        await service.saveLocation(expected);
        expect(SPY).toHaveBeenCalledTimes(1);
    });
    it('saveLocation should be able to save location', async () => {
        const expected ={
            locationName:'SURABAYA'
        }
        let service = new LocationService();
        const SPY = jest.fn(()=>expected);
        
        jest.spyOn(service,'saveLocation').mockImplementation(()=> mockRepo().save(expected))
        const actual = await service.saveLocation(expected);
        deepEqual(actual,expected);
    });
    // it('getLocationById should be Able to get location', async () => {
    //     let expected ={
    //         locationName:'SURABAYA'
    //     }
    //     expected = {...await service.saveLocation(expected)}
    //     deepEqual(await service.getLocationById(expected.idLocation),expected)
    // })
    // it('getAllLocation should return locations', async () => {
    //     let location1 ={
    //         locationName:'SURABAYA'
    //     }
    //     let location2 ={
    //         locationName:'BANDUNG'
    //     }
    //     let expected =[await service.saveLocation(location1),await service.saveLocation(location2)];
    //     deepEqual(await service.getAllLocation(),expected);
    // })

})